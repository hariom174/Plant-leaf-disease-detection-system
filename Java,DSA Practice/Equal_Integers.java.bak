/* Chef has two integers X and Y. Chef wants to perform some operations to make X and Y equal. In one operation,
   Chef can either:
   set : X:=X+1 or set Y:=Y+2
   Find the minimum number of operations required to make X and Y equal. */

import java.util.Scanner;
import java.util.ArrayList;

class Operation 
{
    int x;

    public Operation(int x) 
	{
        this.x = x;
    }

    int getOperation() 
	{
        return x;
    }
}

interface EqualNot 
{
    ArrayList<Integer> res = new ArrayList<>();

    void Minimum_number();
}

class Chef extends Operation implements EqualNot 
{
    int y;

    public Chef(int x, int y) 
	{
        super(x);
        this.y = y;
    }

    @Override
    public void Minimum_number() 
	{
        if (x == y) 
		{
            res.add(0);
        } else if (x < y) 
		{
            res.add((y - x) / 1);
        } else if (x > y) 
		{
            if ((x - y) % 2 == 1) 
			{
                res.add(2 + ((x - y) / 2));
            } else 
			{
                res.add((x - y) / 2);
            }
        }
    }
}

public class Equal_Integer 
{
    public static void main(String[] args) 
	{
        Scanner in = new Scanner(System.in);
        System.out.println("Enter the x number");
        int x = in.nextInt();
        System.out.println("Enter the y number:");
        int y = in.nextInt();

        Chef c = new Chef(x, y);
        c.Minimum_number();

        // Now you can access the ArrayList res from the Minimum_number interface
        ArrayList<Integer> result = EqualNot.res;

        // Print the result or perform other operations as needed
        System.out.println("Find the minimum number of operations required: " + result);
    }
}
