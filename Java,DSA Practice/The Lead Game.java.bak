/* The game of billiards involves two players knocking 3 balls around on a green baize table. Well, there is 
   more to it, but for our purposes this is sufficient.The game consists of several rounds and in each round 
   both players obtain a score, based on how well they played. Once all the rounds have been played, the total 
   score of each player is determined by adding up the scores in all the rounds and the player with the higher 
   total score is declared the winner.The Siruseri Sports Club organises an annual billiards game where the top 
   two players of Siruseri play against each other. The Manager of Siruseri Sports Club decided to add his own 
   twist to the game by changing the rules for determining the winner. In his version, at the end of each round, the cumulative score for each player is calculated, and the leader and her current lead are found. Once all the rounds are over the player who had the maximum lead at the end of any round in the game is declared the winner.
   Consider the following score sheet for a game with 5 rounds:
   Round	Player 1	Player 2
   1	     140	      82
   2         89	          134
   3         90           110
   4	     112	      106
   5	     88	          90
   
  The total scores of both players, the leader and the lead after each round for this game is given below:
  Round	 Player 1	 Player 2	 Leader	Lead
   1	   140	       82		      58
   2	   229	       216            13
   3	   319	       326		      7
   4	   431	       432		      1
   5	   519         522		      3
 Note that the above table contains the cumulative scores.
 The winner of this game is Player 1 as he had the maximum lead (58 at the end of round 1) during the game.
 Your task is to help the Manager find the winner and the winning lead. You may assume that the scores will be
 such that there will always be a single winner. That is, there are no ties. */
	
import java.util.Scanner;
public class The Lead Game 
{
	 public static void calculateLead(int[] s1, int[] s2, int[] wnr, int[] ld, int n, int round, int p1, int p2) 
	 {
        if (round == n) {
            return;
        }

        p1 += s1[round];
        p2 += s2[round];

        if (p1 > p2) {
            wnr[round] = 1;
            ld[round] = p1 - p2;
        } else {
            wnr[round] = 2;
            ld[round] = p2 - p1;
        }

        calculateLead(s1, s2, wnr, ld, n, round + 1, p1, p2);
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] s1 = new int[n];
        int[] s2 = new int[n];

        for (int i = 0; i < n; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            s1[i] = x;
            s2[i] = y;
        }

        int[] wnr = new int[n];
        int[] ld = new int[n];

        // Calculate the winner and lead recursively
        calculateLead(s1, s2, wnr, ld, n, 0, 0, 0);

        int maxLead = ld[0];
        int player = wnr[0];

        for (int i = 0; i < n - 1; i++) {
            if (ld[i + 1] > maxLead) {
                maxLead = ld[i + 1];
                player = wnr[i + 1];
            }
        }

        System.out.println(player + " " + maxLead);
    }
}