/* Chef and Chefina are at positions X and Y on a number line.
   They both love badminton.
   It is known that badminton courts are located at every integer point.
   They want to find a court such that the maximum distance travelled by either of them is minimized.
   Formally, suppose they choose the badminton court at position Z. You need to find the minimum value of 
   max(∣X−Z∣,∣Y−Z∣) across all possible choices of Z. Here, |X∣ denotes absolute value of X.
   Report this minimum value. */

import java.util.Scanner;

class Badminton 
{
    int x;
    int y;

    public Badminton(int x, int y) 
	{
        this.x = x;
        this.y = y;
    }
}

class Located extends Badminton 
{
    public Located(int x, int y) 
	{
        super(x, y);
    }

    public static int BadmintonCourt(int x, int y) 
	{
        if (x == 1) 
		{
            return ; // Specify a base case for recursion
        }
        int z = (x + y) / 2;
        int a = Math.abs(x - z);
        int b = Math.abs(y - z);

        return BadmintonCourt(Math.max(a, b), Math.min(a, b)); // Fix the recursive call
    }
}

public class Nearest_Court 
{
    public static void main(String[] args) 
	{
        Scanner in = new Scanner(System.in);

        System.out.println("Enter the first number:");
        int x = in.nextInt();
        System.out.println("Enter the second number:");
        int y = in.nextInt();

        Located l = new Located(x, y);
        int result = Located.BadmintonCourt(x, y); // Call the static method using the class name
        System.out.println("Find a court such that the maximum distance traveled: " + result);
    }
}
